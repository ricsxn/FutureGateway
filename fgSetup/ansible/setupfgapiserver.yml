# FutureGateway fgapiserver component playbook 
#
# Author: Riccardo Bruno <riccardo.bruno@ct.infn.it>

- hosts: fgAPIServer
  remote_user: "{{ fg_connect_user }}" 
  become: yes
  become_method: sudo
  vars_files:
    - vars/fgdatabase.yml
    - vars/fgcommons.yml
    - vars/fgapiserver.yml
  roles:
    - {role: geerlingguy.git }
    - {role: bobbyrenwick.pip }
    - {role: geerlingguy.apache, when: fg_wsgieng == 'apache' }
  tasks:
    - name: FGUser | Creatign FutureGateway user
      user: name="{{ fg_user }}"
            password="{{ fg_pass }}"
            comment="FutureGateway user"
            generate_ssh_key=yes
    - name: fgAPIServer.git | Cloning fgAPIServer from git
      git: repo="{{ fg_fgAPIServer_git }}"
           dest="/home/{{ fg_user }}/fgAPIServer"
           version="{{ fg_fgAPIServer_gitver }}"
           force=yes
    - name: Configuration | Get futuregateway configuration files
      git: repo="{{ fg_fgSetup_git }}"
           dest="/home/{{ fg_user }}/fgSetup"
           version="{{ fg_fgSetup_gitver }}"
           force=yes
    - name: chown_fgAPIServerRepo | Change ownership for fgAPIServer repo to futuregateway user
      file: path="/home/{{ fg_user }}/{{ item }}" owner="{{ fg_user }}" group="{{ fg_user }}" mode=0775 recurse=yes
      with_items:
         - fgAPIServer
         - fgSetup
    # Package installation: mysql client and dev env+libs (RedHat+Deb)
    - name: ReqPackages_yum | Install required packages for RedHat
      yum: name="{{ item }}" state=latest
      with_items:
         - mysql
         - mysql-devel
         - MySQL-python
         - gcc
         - libffi-devel 
         - python-devel 
         - openssl-devel
         - mod_wsgi
         - screen
      when: ansible_os_family == "RedHat"
    - name: ReqPackages_apt | Install required packages for Debian
      apt: pkg="{{ item }}" state=latest
      with_items:
         - mysql-client
         - libmysqlclient-dev
         - python-mysql.connector 
         - build-essential
         - libssl-dev 
         - libffi-dev
         - python-dev
         - libapache2-mod-wsgi
         - screen
      when: ansible_os_family == "Debian"
    - name: venv | installing virtualenv
      command: pip install virtualenv
    # virtualenv
    - name: installvenv | install virtualenv
      command: pip install virtualenv
               creates=/usr/bin/virtualenv
    - name: createfgvenv | isntall virtualenv for fgAPIServer
      command: virtualenv "/home/{{ fg_user }}/fgAPIServer/venv" 
               creates="/home/{{ fg_user }}/fgAPIServer/venv"
    - name: venvrequiremens | Install virtualenv requirements
      pip: requirements="/home/{{ fg_user }}/fgAPIServer/requirements.txt"
           virtualenv="/home/{{ fg_user }}/fgAPIServer/venv"
    # Configure fgapiserver.conf file
    - name: fgapiserverconf | Configure fgapiserver.conf file
      template: 
        src: templates/fgapiserver.conf.j2
        dest: "/home/{{ fg_user }}/fgAPIServer/fgapiserver.conf"
        backup: yes
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644 
    # Configure wsgi
    #- name: wsgimod | configure wsgi module
    - name: fgwsgiconf | fgAPIServer wsgi configuration
      template:
        src: templates/fgapiserver_wsgi.conf.j2 
        dest: "{{ apache_conf_path }}/sites-available/{{ apache_vhosts_filename }}"
        owner: root
        group: root
        mode: 0644
      notify: restart apache
      when: apache_create_vhosts
    # Configure PTV symulator (test)
    - name: startscreen | Starting PTV screen session
      shell: PTVSESSION=$(su - futuregateway -c "screen -ls | grep PTV") ; if [ "${PTVSESSION}" = "" ]; then su - futuregateway -c "screen -dmS PTV /bin/bash" && su - futuregateway -c "screen -S PTV -X stuff 'cd fgAPIServer\n. venv/bin/activate\n./fgapiserver_ptv.py\n'"; else echo $PTVSESSION; fi
      when: fg_ptvservice == "test"
    # Configure fgapiserver on 8888 (test)
    - name: startscrfg | Starting fgapiserver screen nession
      shell: PTVSESSION=$(su - futuregateway -c "screen -ls | grep fgapiserver") ; if [ "${PTVSESSION}" = "" ]; then su - futuregateway -c "screen -dmS fgapiserver /bin/bash" && su - futuregateway -c "screen -S fgapiserver -X stuff 'cd fgAPIServer\n. venv/bin/activate\n./fgapiserver.py\n'"; else echo $PTVSESSION; fi
      when: fg_ptvservice == "test"
    # Environment directory 
    - name: EnvDir | Environment settings 
      file: path=/home/{{ fg_user }}/.fgprofile state=directory owner={{ fg_user }} group={{ fg_user }} mode=0775 recurse=yes
    # Commons environment
    - name: EnvCommon | FutureGateway commons environment settings
      copy: src="/home/{{ fg_user }}/fgSetup/setup_commons.sh"
            dest="/home/{{ fg_user }}/.fgprofile/commons"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    # Load main environment settings
    - name: EnvFGDB | FGDB environment setting loader
      copy: content="{{ fg_fgdb }}"
            dest="/home/{{ fg_user }}/.fgprofile/fgdb"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    - name: EnvFGAPIServer | fgAPIServer environment setting loader
      copy: content="{{ fg_fgapiserver }}"
            dest="/home/{{ fg_user }}/.fgprofile/fgapiserver"
            owner="{{ fg_user }}"
            group="{{ fg_user }}"
            mode=0644
    # Load FutureGateway profile components in bash_profile file
    - name: EnvProfile | Insert load profile line in .profile file
      blockinfile: block="for f in $(find $HOME/.fgprofile -type f); do source $f; done {{ '#' }} FGLOADENV"
                   create=yes
                   dest="/home/{{ fg_user }}/.profile"
                   owner="{{ fg_user }}"
                   group="{{ fg_user }}"
                   mode=0644
