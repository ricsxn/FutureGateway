# FutureGateway fgapiserver component playbook 
#
# Author: Riccardo Bruno <riccardo.bruno@ct.infn.it>

- hosts: fgAPIServer
  remote_user: "{{ fg_connect_user }}" 
  become: yes
  become_method: sudo
  vars_files:
    - vars/fgdatabase.yml
    - vars/fgcommons.yml
    - vars/apiserverdaemon.yml
  roles:
    - {role: geerlingguy.git }
    - {role: geerlingguy.java }
  tasks:
    #
    # FutureGateway user
    #

    # Create FutureGateway user
    - name: FGUser | Creatign FutureGateway user
      user: 
        name: "{{ fg_user }}"
        password: "{{ fg_pass }}"
        comment: "FutureGateway user"
        generate_ssh_key: yes
        shell: /bin/bash
      register: fguser
    # Manage password for FutureGateway user
    - name: FGUserpwd | Managing futuregateway password
      shell: echo "{{ fg_user }}:{{ fg_pass }}" | /usr/sbin/chpasswd 

    #
    # FutureGateway tester user
    #    

    # Create the FutureGateway tester user
    - name: TesterUser | Creating APIServerDaemon tester user
      user: 
        name: "{{ tester_user }}"
        password: "{{ tester_pass }}"
        comment: "APIServerDaemon tester user"
        shell: /bin/bash
      register: tstuser
    # Manage password for FutureGateway tester user
    - name: TesterUserpwd | Managing tester user password
      shell: echo "{{ tester_user }}:{{ tester_pass }}" | /usr/sbin/chpasswd 

    #
    # SSH password authentication
    #

    # Configure ssh to allow password authentication to FutureGateway user
    - name: fguser_pass | Allow password authentication to {{ fg_user }}
      blockinfile:
        backup: yes 
        dest: /etc/ssh/sshd_config
        regexp: ''
        insertafter: EOF
        block: |
               # {{ fg_user }} allow password auth.
               Match User {{ fg_user }}
               PasswordAuthentication yes
      register: sshdcfg_fguser
      when: fguser.changed and "{{ fg_passauth }}" == "yes"
    # Configure ssh to allow password authentication to FutureGateway tester user 
    - name: tstuser | Allow password authentication to JobTestUser and test user "{{ tester_user }}"
      blockinfile:
        backup: yes
        dest: /etc/ssh/sshd_config
        regexp: ''
        insertafter: EOF
        block: |
               #jobtest allow password auth.
               Match User {{ tester_user }}
               PasswordAuthentication yes
      register: sshdcfg
      when: tstuser.changed
    # Following fix on SSH settings is needed only for Ubuntu14.04
    - name: occicli | Install EGI-FedCloud OCCI cli
      shell: sudo mkdir -p /etc/ssh/ssh_host_disabled; find /etc/ssh/ -name 'ssh_host_*' | grep -v disabled | grep -v rsa | grep -v \_dsa | xargs -I{} sudo mv {} /etc/ssh/ssh_host_disabled/
      args:
        executable: /bin/bash
        creates: /etc/ssh/ssh_host_disabled
      register: ssh_host_disabled
      when: ansible_os_family == "Debian"

    #
    # SSH keyscanning, avoid (yes/no) request SSHing among same host users
    #
    - name: sshkeyscan | Configure SSH keyscan 
      #become: yes
      #become_user: futuregateway
      shell: su - {{ fg_user }} -c "ssh-keyscan -H -t rsa localhost >> /home/{{ fg_user }}/.ssh/known_hosts"
      args:
        executable: /bin/bash
        chdir: "/home/{{ fg_user }}"
      when: sshdcfg.changed or tstuser.changed 

    # Restart ssh if its configuration changes
    - name: restartssh | Restart SSH service
      service:
        name: ssh
        state: restarted
      when: sshdcfg.changed or tstuser.changed or ssh_host_disabled.changed
    
    #
    # GIT Repositories: APIServerDaemon, fgSetup, rOCCI, GridnCloudEngine
    #

    # Stat the APIServerDaemon directory 
    - name: APIServerDaemon.dir | Get stat of APIServerDaemon dir
      stat:
        path: "/home/{{ fg_user }}/APIServerDaemon"
      register: asddir   
    # Extract APIServerDaemon from git repository
    - name: APIServerDaemon.git | Cloning APIServerDaemon from git
      git: 
        repo: "{{ fg_APIServerDaemon_git }}"
        dest: "/home/{{ fg_user }}/APIServerDaemon"
        version: "{{ fg_APIServerDaemon_gitver }}"
        force: yes
      when: not asddir.stat.exists

    # Stat the fgSetup directory
    - name: fgSetup.dir | Get stat of fgSetup dir
      stat: 
        path: "/home/{{ fg_user }}/fgSetup"
      register: fgsdir
    # Extract fgSetup from git repository
    - name: Configuration | Get futuregateway configuration files
      git: 
        repo: "{{ fg_fgSetup_git }}"
        dest: "/home/{{ fg_user }}/fgSetup"
        version: "{{ fg_fgSetup_gitver }}"
        force: yes
      when: not fgsdir.stat.exists

    # Stat the rOCCI directory
    - name: rOCCIadp.dir | Get stat of rOCCI adaptor dir
      stat:
        path: "/home/{{ fg_user }}/jsaga-adaptor-rocci"
      register: roccidir
    # Extract from CSGF git repository the  rOCCI adaptor
    - name: rOCCIadp | JSAGA rOCCI adaptor
      git: 
        repo: "{{ fg_rOCCI_adaptor_git }}"
        dest: "/home/{{ fg_user }}/jsaga-adaptor-rocci"
        version: "{{ fg_rOCCI_adaptor_gitver }}"
        force: yes
      when: not roccidir.stat.exists

    # Stat the GridnCloudEngine directory
    - name: GridnCloudEngine.dir | Get stat of GridnCloudEngine dir
      stat: 
        path: "/home/{{ fg_user }}/grid-and-cloud-engine"
      register: gncengdir
    # Extract from CSGF git repository the Grid and Cloud Engine
    - name: GridnCloudEngine | Grid and Cloud Engine
      git:
        repo: "{{ fg_GridnCloudEngine_git }}"
        dest: "/home/{{ fg_user }}/grid-and-cloud-engine"
        version: "{{ fg_GridnCloudEngine_gitver }}"
        force: yes
      when: not gncengdir.stat.exists

    # Modify file system ownership to extracted repositories
    - name: chown_fgAPIServerRepo | Change ownership for fgAPIServer repo to futuregateway user
      file:
        path: "/home/{{ fg_user }}/{{ item }}"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0775
        recurse: yes
      with_items:
         - APIServerDaemon
         - jsaga-adaptor-rocci
         - grid-and-cloud-engine
         - fgSetup

    #
    # Software packages
    #

    # Package installation: mysql client (RedHat)
    - name: ReqPackages_yum | Install required packages for RedHat
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
         - mlocate
         - mariadb
         - mysql-connector-odbc
         - ruby-devel
         - git
         - openldap
         - openvpn
         - screen
         - jq
      when: ansible_os_family == "RedHat"

    # Package installation: mysql client (Debian)
    - name: ReqPackages_apt | Install required packages for Debian
      apt:
        pkg: "{{ item }}"
        state: latest
      with_items:
         - mlocate
         - mysql-client
         - libmysql-java
         - ant
         - maven
         - build-essential
         - curl
         - ruby-dev
         - libapache2-mod-wsgi
         - git
         - ldap-utils
         - openvpn
         - screen
         - jq
      when: ansible_os_family == "Debian"

      # Tomcat7 installation (RedHat+Deb)
    - name: Tomcat7 | Install Tomcat7 (RedHat+Deb)
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
         - tomcat
         - tomcat-webapps
         - tomcat-admin-webapps
      when: ansible_os_family == "RedHat"

    # Tomcat7 installation (Debian)
    - name: ReqPackages_apt | Install required packages for Debian
      apt:
        pkg: "{{ item }}"
        state: latest
      with_items:
         - tomcat7
         - tomcat7-admin
         - tomcat7-common
      when: ansible_os_family == "Debian"

    #
    # Tomcat configuration
    #

    # Tomcat dir permissions
    - name: tomcat_dir | Setup tomcat directory permissions
      file:
          path: /usr/share/tomcat7 
          state: directory
          mode: 0755
          owner: tomcat7
          recurse: yes
    
    # Tomcat users.xml
    - name: tomcat_usr | Tomcat users.xml configuration
      blockinfile:
        dest: /var/lib/tomcat7/conf/tomcat-users.xml
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        insertbefore: "</tomcat-users>"
        block: | 
                 <role rolename="manager-gui"/>
                 <role rolename="manager-script"/>
                 <role rolename="tomcat"/>
                 <role rolename="liferay"/>
                 <user username="{{ tomcat_user }}" password="{{ tomcat_pass }}" roles="tomcat,liferay,manager-gui,manager-script"/>
        backup: yes
      register: tomcat_usr

    # jdbc/UserTrackingPool + jdbc/gehibernatepool
    - name: tomcat_utpool | Tomcat jdbc/UserTrackingPool in server.xml configuration
      blockinfile:
        dest: /var/lib/tomcat7/conf/server.xml 
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
        insertbefore: "</GlobalNamingResources>"
        block: |
                 <Resource name="jdbc/UserTrackingPool"
                           auth="Container"
                           type="javax.sql.DataSource"
                           username="{{ ut_db_user }}"
                           password="{{ ut_db_password }}"
                           driverClassName="com.mysql.jdbc.Driver"
                           description="UsersTrackingDB connection"
                           url="jdbc:mysql://{{ ut_db_host }}:{{ ut_db_port }}/{{ ut_db_name }}"
                           maxAge="30000"
                           testOnBorrow="true" 
                           testWhileIdle="true"
                           validationInterval="0"
                           initialSize="3"
                           maxTotal="100"
                           maxIdle="30"
                           maxWaitMillis="10000"/>
                 <Resource name="jdbc/gehibernatepool"
                           auth="Container"
                           type="javax.sql.DataSource"
                           username="{{ ut_db_user }}"
                           password="{{ ut_db_password }}"
                           driverClassName="com.mysql.jdbc.Driver"
                           description="UsersTrackingDB connection"
                           url="jdbc:mysql://{{ ut_db_host }}:{{ ut_db_port }}/{{ ut_db_name }}"
                           maxAge="30000"
                           testOnBorrow="true"
                           testWhileIdle="true"
                           validationInterval="0"
                           initialSize="3"
                           maxTotal="100"
                           maxIdle="30"
                           maxWaitMillis="10000"/>
        backup: yes
      register: tomcat_res

    # mysql-connector library
    - name: mysql-connector | Setup mysql-connector library for jdbc
      shell: cd /usr/share/tomcat7/lib/; ln -s ../../java/mysql-connector-java.jar mysql-connector-java.jar
      args:
        executable: /bin/bash
        creates: /usr/share/tomcat7/lib/mysql-connector-java.jar

    #
    # GridnCloudEngine UsersTrackingDB 
    #

    # Check the GridnCloudEngine UsersTrackingDB
    - name: utDBinst0 | UsersTracking Database creation check
      mysql_db: 
        name: userstracking
        state: present
        login_host: "{{ fg_db_host }}"
        login_port: "{{ fg_db_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: db_present
    # Install the GridnCloudEngine UsersTrackingDB 
    - name: utDBinst1 | UsersTracking Database creation and installation
      mysql_db: 
        name: userstracking
        state: import
        login_host: "{{ fg_db_host }}"
        login_port: "{{ fg_db_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        target: "/home/{{ fg_user }}/grid-and-cloud-engine/UsersTrackingDB/UsersTrackingDB.sql"
      when: db_present.changed

    #
    # Environment settings
    #

    # Environment directory 
    - name: EnvDir | Environment settings
      file:
        path: "/home/{{ fg_user }}/.fgprofile"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0775
        recurse: yes
    # Commons environment
    - name: EnvCommon | FutureGateway commons environment settings
      copy:
        src: "/home/{{ fg_user }}/fgSetup/setup_commons.sh"
        dest: "/home/{{ fg_user }}/.fgprofile/commons"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    # Load db environment settings
    - name: EnvFGDB | FGDB environment setting loader
      copy:
        content: "{{ fg_fgdb }}"
        dest: "/home/{{ fg_user }}/.fgprofile/fgdb"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    # Load specific APIServerDaemon environment
    - name: EnvAPIServerDaemon | APIServerDaemon environment setting loader
      copy:
        content: "{{ fg_apiserverdaemon }}"
        dest: "/home/{{ fg_user }}/.fgprofile/apiserverdaemon"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
    # Load FutureGateway profile components in bash_profile file
    - name: EnvProfile | Insert load profile line in .profile file
      blockinfile:
        block: "for f in $(find $HOME/.fgprofile -type f); do source $f; done {{ '#' }} FGLOADENV"
        create: yes
        dest: "/home/{{ fg_user }}/.profile"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644

    #
    # Source file building: GridnCloudEngine, rOCCI adp, APIServerDaemon
    #

    # Create lib directory in APIServerDaemon
    #
    # GridnCloudEngine and JSAGA adaptors jars must be placed
    # inside the APIServerDaemon lib directory
    #
    - name: ASDlib | APIServerDemon lib directory
      file:
        path: "/home/{{ fg_user }}/APIServerDaemon/lib"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0755 

    # Build GridnCloudEngine threadpool
    - name: gncTPool_bld | Build the GridnCloudEngine threadpool
      become: yes
      #become_user: futuregateway
      command: su - {{ fg_user }} -c "cd /home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool; mvn clean install -Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6"
      args:
        #chdir: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool"
        creates: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
      register: gnceng_tp
    # Stat grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar
    - name: gnceng_thrpool.jar | Stat grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar
      stat:
        path: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
      register: gnceng_tp_jar 
    # Place GridnCloudEngine threadpool jar into APIServerdaemon lib/
    - name: gncTPool_cpy | Copy the GridnCloudEngine threadpool jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: gnceng_tp.changed or not gnceng_tp_jar.stat.exists
    # Place GridnCloudEngine threadpool lib/ content into APIServerdaemon lib/
    - name: gncTPool_lib | Copy the GridnCloudEngine threadpool lib/ content to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine-threadpool/target/lib/"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: gnceng_tp.changed or not gnceng_tp_jar.stat.exists

    # Build GridnCloudEngine main classes
    - name: gncMain_bld | Build the GridnCloudEngine main classes
      become: yes
      #become_user: futuregateway
      command: su - {{ fg_user }} -c "cd /home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine_M; mvn clean install -Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6"
      args:
        #chdir: "/home/{{ fg_user }}/grid-and-cloud-engine/grid-and-cloud-engine_M"
        creates: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
      register: gnceng_M
    # Stat grid-and-cloud-engine-threadpool-0.0.1-SNAPSHOT.jar
    - name: grid-and-cloud-engine_M.jar | Stat grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar 
      stat:        
        path: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
      register: gnceng_m_jar
    # Place GridnCloudEngine main classes jar into APIServerdaemon lib/
    - name: gncMain_cpy | Copy the GridnCloudEngine main jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/grid-and-cloud-engine_M-0.0.1-SNAPSHOT.jar"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: gnceng_M.changed or not gnceng_m_jar.stat.exists
    # Place GridnCloudEngine main lib/ content into APIServerdaemon lib/
    - name: gncMain_lib | Copy the GridnCloudEngine main lib/ content to APIServerDaemon lib directory
      copy: 
        src: "/home/{{ fg_user }}//grid-and-cloud-engine/grid-and-cloud-engine_M/target/lib/"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/"
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: gnceng_M.changed or not gnceng_m_jar.stat.exists

    # Please check that all adaptors jars have been downloaded ... 

    #
    # Build custom JSAGA adaptors
    #

    # Build jsaga-rocci-adaptor
    - name: rocci_bld | Build jsaga-rocci-adaptor
      become: yes
      #become_user: futuregateway
      command: su - {{ fg_user }} -c "cd /home/{{ fg_user }}/jsaga-adaptor-rocci; ant all"
      args:
        #chdir: "/home/{{ fg_user }}/jsaga-adaptor-rocci"
        creates: "/home/{{ fg_user }}/jsaga-adaptor-rocci/dist/jsaga-adaptor-rocci.jar"
      register: rocci
    # Stat jsaga-adaptor-rocci.jar 
    - name: jsaga-adaptor-rocci.jar | Stat jsaga-adaptor-rocci.jar 
      stat:
        path: "/home/{{ fg_user }}/APIServerDaemon/lib/jsaga-adaptor-rocci.jar"
      register: rocci_jar
    # Place jsaga-rocci-adaptor jar into APIServerdaemon lib/
    - name: rocci_cpy | Copy jsaga-rocci-adaptor jar to APIServerDaemon lib directory
      copy:
        src: "/home/{{ fg_user }}/jsaga-adaptor-rocci/dist/jsaga-adaptor-rocci.jar"
        dest: "/home/{{ fg_user }}/APIServerDaemon/lib/jsaga-adaptor-rocci.jar"
        owner: "{{ fg_user }}" 
        group: "{{ fg_user }}"
        mode: 0644
      when: rocci.changed or not rocci_jar.stat.exists

    #
    # APIServerDaemon .properties files
    #
    # Use template files to create .properties files
    #

    # log4j.properties files
    - name: log4j_prop | Configure log4j.properties file
      template:
        src: templates/asd_log4j.properties.j2
        dest: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/log4j.properties"
        backup: yes
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644 
    # APIServerDaemon.properties file
    - name: asd_prop | Configure APIServerDaemon file
      template:
        src: templates/asd_APIServerDaemon.properties.j2
        dest: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/classes/it/infn/ct/APIServerDaemon.properties"
        backup: yes
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644

    #
    # Build APIServerDaemon
    #

    # Create the web/WEB-INF/lib
    - name: mkwebinflib | create APIServerDaemon web/WEB-INF/lib dir
      file:
        path: "/home/{{ fg_user }}/APIServerDaemon/web/WEB-INF/lib"
        state: directory
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0755
    # Build APIServerDaemon war file
    - name: bld_asdwar | Build the APIServerDaemon war file
      become: yes
      #become_user: futuregateway
      shell: su - {{ fg_user }} -c "cd /home/{{ fg_user }}/APIServerDaemon; . /home/{{ fg_user }}/.profile && ant all"
      args:
        executable: /bin/bash
        #chdir: "/home/{{ fg_user }}/APIServerDaemon"
        creates: "/home/{{ fg_user }}/APIServerDaemon/dist/APIServerDaemon.war"
      register: asdwar
    # Deploy APIServerDaemon war file into Tomcat webapps dir
    - name: dplyasd | Deploy APIServerDaemon.war file
      copy:
        src: "/home/{{ fg_user }}/APIServerDaemon/dist/APIServerDaemon.war"
        dest: /var/lib/tomcat7/webapps/APIServerDaemon.war 
        owner: "{{ fg_user }}"
        group: "{{ fg_user }}"
        mode: 0644
      when: asdwar.changed

    #
    # OCCI cli from EGI-fedcloud
    #
    # This also installs the GSI environment and VOMS configuration
    #

    # Use EGI FedCloud installation script
    - name: occicli | Install EGI-FedCloud OCCI cli
      shell: curl -L http://go.egi.eu/fedcloud.ui | /bin/bash -
      args:
        executable: /bin/bash
        creates: /usr/bin/occi
      register: occi

    #
    # VOMS configuration
    #
    # Each VO requires three steps:
    #  1) Create the VO directory
    #  2) Place the VO configuration entry (lsc) in vomsdir
    #  3) Place the VO description in vomses dir


    #
    # vo.indigo-datacloud.eu
    #

    # VOMS conf: vo.indigo-datacloud.eu (dir)
    - name: vomsconf1_3 | Configuring vo.indigo-datacloud.eu (dir)
      file:
        dest: /etc/grid-security/vomsdir/vo.indigo-datacloud.eu
        group: "{{ fg_user }}"
        owner: "{{ fg_user }}"
        mode: 0755 
        state: directory 
    # VOMS conf: vo.indigo-datacloud.eu (lsc)
    - name: vomsconf2_3 | Configuring vo.indigo-datacloud.eu (lsc)
      copy:
        content: "{{ voms_indigo_lsc }}"
        dest: /etc/grid-security/vomsdir/vo.indigo-datacloud.eu/voms01.ncg.ingrid.pt.lsc 
        group: "{{ fg_user }}"
        owner: "{{ fg_user }}"
        mode: 644
    # VOMS conf: vo.indigo-datacloud.eu (vomses)
    - name: vomsconf3_3 | Configuring vo.indigo-datacloud.eu (vomses)
      copy:
        content: "{{ voms_indigo_vomses }}"
        dest: /etc/vomses/vo.indigo-datacloud.eu-voms01.ncg.ingrid.pt 
        group: "{{ fg_user }}"
        owner: "{{ fg_user }}"
        mode: 644

    # Fix permissions to vomsdir files
    - name: vomsdir_rights | Fix vomsdir certificates access rights
      shell: find /etc/grid-security/vomsdir/ | xargs -I{} chmod o+r,g+r,u+r {}
      args:
        executable: /bin/bash        
      when: occi.changed
    
    # Fix permission to vomses files
    - name: vomsesdir_rights | Fix vomsesdir certificates access rights
      shell: find /etc/vomses | xargs -I{} chmod o+r,g+r,u+r {}
      args:
        executable: /bin/bash        
      when: occi.changed

    # Add tomcat user into futuregateway group
    - name: tomcat2fgusr | Add tomcat user to futuregatway group
      shell: TCUSR=$(cat /etc/passwd  | grep tomcat | awk -F':' '{ print $1 }'); usermod -a -G {{ fg_user }} $TCUSR
      args:
        executable: /bin/bash
        chdir: "/home/{{ fg_user }}"

    # Restart tomcat if necessary
    - name: restarttomcat | Restart Tomcat service
      service:
        name: tomcat7
        state: restarted
      when: tomcat_usr.changed or tomcat_res.changed

    #
    # Baseline configuration
    #

    #
    # Configure FutureGateway DB accordingly to the tester user
    #
    # FutureGateway provides a helloworld and sayhello default applications
    # in order to use them the infrastructure settings must be changed
    # with the APIServerDaemon tester user credentials
    #

    # Configure the SSH infrastructure host parameter
    - name: sshtst_host | Configure SSH infrastructure host parameter
      become: yes
      #become_user: futuregateway
      shell: su - {{ fg_user }} -c ". /home/{{ fg_user }}/.profile;asdb \"update infrastructure_parameter set pvalue='ssh://{{test_ssh_host}}:{{test_ssh_port}}' where pname='jobservice' and infra_id=1;\""
      args:
        executable: /bin/bash
        chdir: "/home/{{ fg_user }}"
      #when: only 1st time APIServerDaemon installs
    # Configure the SSH infrastructure user parameter
    - name: sshtst_user | Configure SSH infrastructure user parameter
      become: yes
      #become_user: futuregateway
      shell: su - {{ fg_user }} -c ". /home/{{ fg_user }}/.profile;asdb \"update infrastructure_parameter set pvalue='{{ tester_user }}' where pname='username' and infra_id=1;\""
      args:
        executable: /bin/bash
        chdir: "/home/{{ fg_user }}"
      #when: only 1st time APIServerDaemon installs
    # Configure the SSH infrastructure user password parameter
    - name: sshtst_pass | Configure SSH infrastructure password parameter
      become: yes
      #become_user: futuregateway
      shell: su - {{ fg_user }} -c ". /home/{{ fg_user }}/.profile;asdb \"update infrastructure_parameter set pvalue='{{ tester_pass }}' where pname='password' and infra_id=1;\""
      args:
        executable: /bin/bash
        chdir: "/home/{{ fg_user }}"
      #when: only 1st time APIServerDaemon installs

    # Updatedb
    - name: updatedb | Execute updatedb command
      command: updatedb
